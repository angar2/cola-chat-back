generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

// Database
datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

// Model
model User {
  id        String    @id
  email     String    @unique
  name      String?
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  isActive  Boolean   @default(true)
  rooms     Room[]
}

model Room {
  id          String    @id
  title       String
  namespace   String
  password    String?
  capacity    Int       @default(0)
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  isPassword  Boolean   @default(false)
  isExpired   Boolean   @default(false)
  messages    Message[]
  roomChatters  RoomChatter[]
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
}

model Chatter {
  id        String    @id
  nickname  String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  isActive  Boolean   @default(true)
  messages  Message[]
  roomChatters  RoomChatter[]
}

model Message {
  id        Int         @id @default(autoincrement())
  type      MessageType @default(MESSAGE)
  content   String      @db.Text
  sentAt    DateTime    @default(now())
  room      Room        @relation(fields: [roomId], references: [id])
  roomId    String
  chatter   Chatter @relation(fields: [chatterId], references: [id])
  chatterId String

  @@index([roomId])
  @@index([chatterId])
}

model RoomChatter {
  id        Int         @id @default(autoincrement())
  joinedAt  DateTime    @default(now())
  leftAt    DateTime?
  isActive  Boolean     @default(true)
  room      Room        @relation(fields: [roomId], references: [id])
  roomId    String
  chatter   Chatter @relation(fields: [chatterId], references: [id])
  chatterId String

  @@index([roomId])
  @@index([chatterId])
}

// enum
enum MessageType {
  MESSAGE
  PING
}